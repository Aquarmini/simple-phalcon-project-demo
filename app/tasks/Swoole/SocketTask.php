<?php

namespace App\Tasks\Swoole;

use App\Core\Cli\Task\Socket;
use swoole_server;
use swoole_process;

class SocketTask extends Socket
{
    protected function events()
    {
        return [
            'connect' => [$this, 'connect'],
            'receive' => [$this, 'receive'],
            'close' => [$this, 'close'],
        ];
    }

    protected function beforeServerStart(swoole_server $server)
    {
        parent::beforeServerStart($server); // TODO: Change the autogenerated stub
        $process = new swoole_process(function (swoole_process $worker) use ($server) {
            if (!file_exists(ROOT_PATH . '/tick.lock')) {
                file_put_contents(ROOT_PATH . '/tick.lock', 1);
            }
            swoole_timer_tick(1000, function () use ($worker) {
                if (file_get_contents(ROOT_PATH . '/tick.lock')) {
                    echo 'tick:' . time() . ':' . $worker->pid . PHP_EOL;
                }
            });
        });

        $server->addProcess($process);
    }


    public function connect(swoole_server $server, $fd, $from_id)
    {
        echo 'connect' . PHP_EOL;
    }

    public function receive(swoole_server $server, $fd, $reactor_id, $data)
    {
        $data = 'receive:' . $data;
        echo $data;
        $server->send($fd, $data);
    }

    public function close(swoole_server $server, $fd, $reactorId)
    {
        echo 'close' . PHP_EOL;
    }

}

